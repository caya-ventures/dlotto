type UserTicket = 
 record {
   ticket: Ticket;
   ticket_id: TicketId;
   user_id: UserId;
 };
type UserId = text;
type Tokens = record {e8s: nat64;};
type TicketId = nat;
type Ticket = 
 record {
   date_time: int;
   entity_id: nat;
   regular: Numbers;
   round: Round;
   super: Numbers;
 };
type Round = 
 record {
   finish_at: Date;
   prize_pot: nat;
   round: nat;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: vec UserTicket;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: Ticket;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type ProfileUpdate = record {bio: Bio;};
type Profile = 
 record {
   bio: Bio;
   id: principal;
 };
type Numbers = vec nat;
type Error = 
 variant {
   AlreadyExists;
   NotAuthorized;
   NotFound;
 };
type Date = int;
type Bio = record {username: text;};
type AccountIdentifier = blob;
service : {
  assignTicketToUser: (vec Ticket) -> (vec UserTicket);
  canisterAccount: () -> (AccountIdentifier) query;
  canisterBalance: () -> (Tokens);
  create: () -> (Result);
  delete: () -> (Result);
  generateWinningTicket: () -> (Ticket);
  getAllWinHistory: () -> (vec record {
                                 nat;
                                 Ticket;
                               });
  getCurrentRound: () -> (Round);
  getCurrentWinTicket: () -> (Ticket);
  getTicketPrize: (nat) -> (opt float64);
  getUserAccountId: (principal) -> (AccountIdentifier);
  getUserTicket: (nat) -> (Result_3);
  getWinHistory: (nat) -> (Result_2);
  read: () -> (Result_1) query;
  tranferTokens: (AccountIdentifier, nat64) -> () oneway;
  update: (ProfileUpdate) -> (Result);
  userBalance: () -> (Tokens);
  userId: () -> (AccountIdentifier);
}
